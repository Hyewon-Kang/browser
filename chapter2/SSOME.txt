SCCOM : CSS Object Model

CSS 스타일은 브라우저가 어떻게 이해하는가?
DOM( HTML ) + CSS = CSSOM
compute styles : 모든 것들이 다 이미 계산된 스타일

html에서 font-size를 14로 지정하면 cascading룰에 따라 모든 자식 요소들이 font-size가 14가 됨.

브라우저가 html 파일을 읽게 되면 DOM 트리를 만들게 되고, 다음에 CSS 파일을 읽고 CSS 스타일 트리를 만듦. DOM과 CSSOM을 합해서 최종적으로 브라우저에 표기될 아이들만(=사용자에게 보여지는 아이들만) 선별되어 Render Tree를 만들음.
ex) span의 속성이 opacity: 0, visibility: hidden이면 Render Tree에 포함이 되지만, span 속성이 display: none 이면 Render Tree에 포함이 되지 않음

CSS에는 cascading이라는 규칙이 있어서 브라우저에서 설정된 기본적인 css가 있다면 그것들이 모두 적용이 되고 또는 부모 요소에서 폰트를 지정하면 자식 요소들도 동일한 속성값을 가질 수 있음


!! Critical rendering path !!

브라우저에서 URL을 입력하게 되면 아래와 같은 순서로 진행됨
requests(html파일 요청)/response -> loading(html파일을 읽어 DOM으로 변환) -> scripting  -> rendering(Render Tree) -> layout -> painting 

requests~scripting까지 Construction 과정 (DON, CSSOM, RenderTree)
rendering~painting까지 Operation 과정 (layout, paint, composition)
-layout: RenderTree를 기반으로 레이아웃을 구상함
-paint: 계산한 아이들을 바로 그림을 그리는 것이 아니라 요소들을 어떻게 배치했냐에 따라서 각각 부분을 나누어서 준비해놓음. 레이어별로 paint를 준비해놓음. 레이어별로 준비하는 이유 => 성능 개선을 위해서 스스로 준비해놓는 것임. 만약, 레이어 기능을 이용하지 않고 전체적으로 웹페이지를 준비할 때 한 부분을 수정한다면 전체적으로 바꿔줘야하지만 레이어 기능을 이용하면 수정되는 레이어만 다시 준비해주면 되기 때문임. 
-composition: 준비된 레이어를 브라우저 위에 표기해줌. 

Construction과정의 포인트 => DOM. DOM의 크기가 작으면 작을 수록 RenderTree를 만들기까지의 시간이 적게 걸림. 최대한 요소들을 작게 만드는 것이 중요함
Operation과정의 포인트 => paint. paint가 자주 일어나지 않도록 만드는 것이 중요함.


레이어 데모

브라우저가 어떻게 layers를 만들었는지 확인하는 방법
개발툴 -> Options -> More tools -> layers


https://csstriggers.com/ 에서 CSS 속성을 쓰면 좋은지 확인해보기!
Blink는 크롬, Gecko는 파이어폭스, WebKit은 사파리, EdgeHTML은 오래된 Internet Explore
괜찮은 속성 : opacity, transform(composite만 일어남)
안좋은 속성: width(layout 발생), height(layout 발생)

움직임을 쓸 때는 translate를 사용하는 것이 매우 좋음
